// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String         @id @default(cuid())
  email                  String?        @unique
  address                String         @unique
  listings               Listing[]
  auctions               Auction[]
  initiatedListingOffers ListingOffer[] @relation("initiatedListingOffers")
  receievedListingOffers ListingOffer[] @relation("receivedListingOffers")
  initiatedAuctionBids   AuctionBid[]   @relation("initiatedAuctionBids")
  receivedAuctionBids    AuctionBid[]   @relation("receivedAuctionBids")
}

model Listing {
  id          String         @id @default(cuid())
  creatorAddr String
  tokenId     String         @unique
  price       Decimal
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt()
  offers      ListingOffer[]
  nft         NFT            @relation(fields: [tokenId], references: [tokenId], onDelete: Cascade)
  creator     User           @relation(fields: [creatorAddr], references: [address], onDelete: Cascade)
}

model ListingOffer {
  id          String   @id @default(cuid())
  offerorAddr String
  offereeAddr String
  amount      Decimal
  listingId   String
  createdAt   DateTime @default(now())
  offeror     User     @relation(name: "initiatedListingOffers", fields: [offerorAddr], references: [address], onDelete: Cascade)
  offeree     User     @relation(name: "receivedListingOffers", fields: [offereeAddr], references: [address], onDelete: Cascade)
  listing     Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Auction {
  id          String       @id @default(cuid())
  creatorAddr String
  tokenId     String       @unique
  createdAt   DateTime     @default(now())
  duration    Decimal
  minBid      Decimal
  updatedAt   DateTime     @updatedAt()
  bids        AuctionBid[]
  nft         NFT          @relation(fields: [tokenId], references: [tokenId], onDelete: Cascade)
  creator     User         @relation(fields: [creatorAddr], references: [address], onDelete: Cascade)
}

model AuctionBid {
  id           String   @id @default(cuid())
  bidderAddr   String
  receiverAddr String
  amount       Decimal
  auctionId    String
  createdAt    DateTime @default(now())
  auction      Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder       User     @relation(name: "initiatedAuctionBids", fields: [bidderAddr], references: [address], onDelete: Cascade)
  receiver     User     @relation(name: "receivedAuctionBids", fields: [receiverAddr], references: [address], onDelete: Cascade)
}

model Collection {
  id          String @id @default(cuid())
  name        String
  issuer      String
  taxon       Int
  description String
  nfts        NFT[]
}

model NFT {
  id           String     @id @default(cuid())
  tokenId      String     @unique
  owner        String
  imageUrl     String
  collectionId String
  attributes   Json
  listing      Listing?
  auction      Auction?
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
}
