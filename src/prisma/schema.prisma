// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OfferStatus{
  CANCELLED
  PENDING
  ACCEPTED
  REJECTED
}

enum ListingStatus{
  ONGOING
  CANCELLED
  COMPLETED
}


model User {
  id      String  @id @default(cuid())
  email   String? @unique
  address String  @unique

  listings Listing[]
  auctions Auction[]

  sentOffers     Offer[] @relation("sentOffers")
  receivedOffers Offer[] @relation("receivedOffers")

  initiatedListingOffers ListingOffer[] @relation("initiatedListingOffers")
  receievedListingOffers ListingOffer[] @relation("receivedListingOffers")

  initiatedAuctionBids AuctionBid[] @relation("initiatedAuctionBids")
  receivedAuctionBids  AuctionBid[] @relation("receivedAuctionBids")
}

model Listing {
  id          String   @id @default(cuid())
  creatorAddr String
  nftId       String   @unique
  price       Decimal
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
  status      ListingStatus @default(ONGOING)
  createTxnHash String 
  updateTxnHash String?

  offers ListingOffer[]

  nft     Nft  @relation(fields: [nftId], references: [tokenId], onDelete: Cascade)
  creator User @relation(fields: [creatorAddr], references: [address], onDelete: Cascade)
}

model ListingOffer {
  id          String   @id @default(cuid())
  offerorAddr String
  offereeAddr String
  listingId   String
  amount      Decimal
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
  status      OfferStatus @default(PENDING)
  createTxnHash String @unique()
  updateTxnHash String? @unique()

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  offeree User    @relation(name: "receivedListingOffers", fields: [offereeAddr], references: [address], onDelete: Cascade)
  offeror User    @relation(name: "initiatedListingOffers", fields: [offerorAddr], references: [address], onDelete: Cascade)
}

model Auction {
  id          String   @id @default(cuid())
  creatorAddr String
  nftId       String   @unique
  duration    Decimal
  minBid      Decimal
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
  status      ListingStatus @default(ONGOING)
  createTxnHash String @unique()
  updateTxnHash String? @unique()

  bids AuctionBid[]

  nft     Nft  @relation(fields: [nftId], references: [tokenId], onDelete: Cascade)
  creator User @relation(fields: [creatorAddr], references: [address], onDelete: Cascade)
}

model AuctionBid {
  id           String   @id @default(cuid())
  bidderAddr   String
  receiverAddr String
  auctionId    String
  amount       Decimal
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()
  status       OfferStatus @default(PENDING)
  createTxnHash String @unique()
  updateTxnHash String? @unique()

  auction  Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder   User    @relation(name: "initiatedAuctionBids", fields: [bidderAddr], references: [address], onDelete: Cascade)
  receiver User    @relation(name: "receivedAuctionBids", fields: [receiverAddr], references: [address], onDelete: Cascade)
}

model Offer {
  id           String   @id @default(cuid())
  senderAddr   String
  receiverAddr String
  nftId        String
  amount       Decimal
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()
  status       OfferStatus @default(PENDING)
  createTxnHash String @unique()
  updateTxnHash String? @unique()

  nft      Nft  @relation(fields: [nftId], references: [tokenId], onDelete: Cascade)
  sender   User @relation(name: "sentOffers", fields: [senderAddr], references: [address], onDelete: Cascade)
  receiver User @relation(name: "receivedOffers", fields: [receiverAddr], references: [address], onDelete: Cascade)
}

model Collection {
  id           String @id @default(cuid())
  name         String
  taxon        Int
  issuer       String
  description  String
  // gotten from a combination of `issuer-taxon`
  collectionId String @unique
  floorPrice Decimal @default(0)
  createdAt DateTime? 

  nfts Nft[]

  @@unique([issuer, taxon])
}

model Nft {
  id           String  @id @default(cuid())
  uri          String?
  tokenId      String  @unique
  owner        String
  imageUrl     String?
  attributes   Json?
  collectionId String?
  price Decimal @default(0)
  sequence Int 

  listing Listing[]
  auction Auction[]

  offers Offer[]

  collection Collection? @relation(fields: [collectionId], references: [collectionId], onDelete: Cascade)
}
